#include<bits/stdc++.h>
using namespace std;

struct Edge {
    int src, dst, wt;
};

void bellmanFord(int V, int E, vector<Edge>& edges) {
    vector<int> dist(V, INT_MAX);
    dist[0] = 0; 
    
    
    for (int i = 1; i < V; ++i) {
        for (int j = 0; j < E; ++j) {
            int u = edges[j].src;
            int v = edges[j].dst;
            int wt = edges[j].wt;
            if (dist[u] != INT_MAX && dist[u] + wt < dist[v]) {
                dist[v] = dist[u] + wt;
            }
        }
    }

    
    for (int j = 0; j < E; ++j) {
        int u = edges[j].src;
        int v = edges[j].dst;
        int wt = edges[j].wt;
        if (dist[u] != INT_MAX && dist[u] + wt < dist[v]) {
            cout << "Graph contains negative weight cycle\n";
            return;
        }
    }

    
    for (int i = 1; i < V; ++i) {
        cout << "0 -> " << i << " : " << dist[i] << endl;
    }
}

int main() {
    int V, E;
    cout<<"Enter no. of vertices and edges : \n";
    cin >> V >> E;
    
    vector<Edge> edges(E);

    for (int i = 0; i < E; ++i) {
        cout<<"Enter edge "<<i+1<<" : \n";
        cin >> edges[i].src ;
        cin >> edges[i].dst ;
        cin >> edges[i].wt  ;
    }

    bellmanFord(V, E, edges);
    return 0;
}
